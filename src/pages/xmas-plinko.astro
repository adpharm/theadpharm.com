---
import Layout from "@/components/layout/Layout.astro";
---

<script>
  import {
    Engine,
    Render,
    Bodies,
    Composite,
    Runner,
    Body,
    Vector,
    Events,
  } from "matter-js";

  const canvas: HTMLCanvasElement | null =
    document.querySelector(".mattercanvas");
  if (!canvas) throw new Error("Canvas not found");

  const matterContainer: HTMLDivElement | null =
    document.querySelector(".mattercontainer");
  if (!matterContainer) throw new Error("Matter container not found");

  //
  const groudThickness = 20;

  const engine = Engine.create();

  const render = Render.create({
    engine,
    canvas,
  });

  /*****************************************************************************
   *
   * Objects
   *
   ******************************************************************************/

  // Plinko pins
  const pins: Body[] = [];
  const pins_ = {
    size: 20,
    numPerRow: 10,
    numRows: 10,
  };

  // create equally spaced pins according to the settings above
  const gapX = render.canvas.clientWidth / pins_.numPerRow;
  const gapY = render.canvas.clientHeight / pins_.numRows;
  for (let rowIdx = 0; rowIdx < pins_.numRows; rowIdx += 1) {
    const stagger = rowIdx % 2 === 0 ? 0 : gapX / 2;
    // create a row of pins using canvas width and the settings above
    for (let colIdx = 0; colIdx < pins_.numPerRow; colIdx += 1) {
      // if this is a staggered row, don't add the last pin
      if (stagger > 0 && colIdx === pins_.numPerRow - 1) {
        continue;
      }

      const x = gapX * colIdx;
      const y = rowIdx * gapY;

      const pin = Bodies.circle(
        // move the whole thing over
        x + gapX / 2 + stagger,
        y + gapY / 2 - pins_.size / 2,
        pins_.size / 2,
        {
          isStatic: true,
          render: {
            fillStyle: "white",
          },
        }
      );

      pins.push(pin);
    }
  }

  Composite.add(engine.world, pins);

  const ground = Bodies.rectangle(
    canvas.clientWidth / 2,
    canvas.clientHeight + groudThickness / 2,
    27184,
    groudThickness,
    { isStatic: true }
  );

  const leftWall = Bodies.rectangle(
    0 - groudThickness / 2,
    canvas.clientHeight / 2,
    groudThickness,
    canvas.clientHeight * 5,
    {
      isStatic: true,
    }
  );

  const rightWall = Bodies.rectangle(
    canvas.clientWidth + groudThickness / 2,
    canvas.clientHeight / 2,
    groudThickness,
    canvas.clientHeight * 5,
    { isStatic: true }
  );

  // add all of the bodies to the world
  Composite.add(engine.world, [ground, leftWall, rightWall]);

  // run the renderer
  Render.run(render);

  // create runner
  const runner = Runner.create();

  // run the engine
  Runner.run(runner, engine);

  function handleResize(matterContainer: HTMLElement) {
    // set canvas size to new values
    render.canvas.width = matterContainer.clientWidth;
    render.canvas.height = matterContainer.clientHeight;

    // reposition ground
    Body.setPosition(
      ground,
      Vector.create(
        matterContainer.clientWidth / 2,
        matterContainer.clientHeight + groudThickness / 2
      )
    );

    // reposition right wall
    Body.setPosition(
      rightWall,
      Vector.create(
        matterContainer.clientWidth + groudThickness / 2,
        matterContainer.clientHeight / 2
      )
    );

    // reposition left wall
    // Body.setPosition(
    //   leftWall,
    //   Vector.create(0 - groudThickness / 2, canvas.clientHeight / 2)
    // );

    // reposition pins
    // const gapX = canvas.clientWidth / pins_.numPerRow;
    // const gapY = canvas.clientHeight / pins_.numRows;
    // for (let rowIdx = 0; rowIdx < pins_.numRows; rowIdx += 1) {
    //   const stagger = rowIdx % 2 === 0 ? 0 : gapX / 2;
    //   for (let colIdx = 0; colIdx < pins_.numPerRow; colIdx += 1) {
    //     if (stagger > 0 && colIdx === pins_.numPerRow - 1) {
    //       continue;
    //     }

    //     const x = gapX * colIdx;
    //     const y = rowIdx * gapY;

    //     Body.setPosition(
    //       pins[rowIdx * pins_.numPerRow + colIdx],
    //       Vector.create(x + gapX / 2 + stagger, y + gapY / 2 - pins_.size / 2)
    //     );
    //   }
    // }
  }

  window.addEventListener("resize", () => handleResize(matterContainer));
</script>

<Layout title="Let's play Christmas Plinko! by The Adpharm">
  <main class="flex flex-col min-h-screen">
    <div class="max-w-7xl mx-auto pt-32">
      <h1>Plinko!</h1>

      <div class="mattercontainer h-full w-full bg-red-100">
        <canvas class="mattercanvas h-full w-full"></canvas>
      </div>
    </div>
  </main>
</Layout>
