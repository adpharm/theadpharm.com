---
import Layout from "@/layouts/Layout.astro";
---

<script src="https://cdn.jsdelivr.net/npm/poly-decomp@0.3.0/build/decomp.min.js"
></script>
<script>
  const collisionSound = new Audio("../../src/audio/bubblepop-254773.mp3");
  // collisionSound.play();
  // export the necessary modules
  // import fs from "fs";
  import {
    Mouse,
    MouseConstraint,
    Engine,
    Render,
    World,
    Body,
    Bodies,
    Events,
    Runner,
    Composite,
    Svg,
    Vertices,
    Vector,
    type ICollisionCallback,
  } from "matter-js";

  // import redOrnament from "src/vertices/mountain.json" assert { type: "json" };

  const mountain = {
    generator_info:
      "Shape definitions generated with PhysicsEditor. Visit https://www.codeandweb.com/physicseditor",
    "icy-mountain-removebg-preview": {
      type: "fromPhysicsEditor",
      label: "icy-mountain-removebg-preview",
      isStatic: false,
      density: 0.10000000149011612,
      restitution: 0,
      friction: 0.10000000149011612,
      frictionAir: 0.009999999776482582,
      frictionStatic: 0.5,
      collisionFilter: {
        group: 0,
        category: 1,
        mask: 255,
      },
      fixtures: [
        {
          label: "",
          isSensor: false,
          vertices: [
            [
              { x: 33, y: 68 },
              { x: 31, y: 68 },
              { x: 33, y: 70 },
            ],
            [
              { x: 35, y: 70 },
              { x: 33, y: 70 },
              { x: 35, y: 72 },
            ],
            [
              { x: 51, y: 87 },
              { x: 49, y: 87 },
              { x: 51, y: 89 },
            ],
            [
              { x: 290, y: 381 },
              { x: 288, y: 381 },
              { x: 290, y: 383 },
            ],
            [
              { x: 43, y: 685 },
              { x: 43, y: 683 },
              { x: 41, y: 685 },
            ],
            [
              { x: 269, y: 482 },
              { x: 270, y: 480 },
              { x: 282, y: 376 },
              { x: 268, y: 364 },
              { x: 267, y: 482 },
            ],
            [
              { x: 347, y: 430 },
              { x: 345, y: 430 },
              { x: 340, y: 436 },
              { x: 346, y: 434 },
            ],
            [
              { x: 345, y: 430 },
              { x: 341, y: 425 },
              { x: 334, y: 422 },
              { x: 335, y: 439 },
              { x: 340, y: 436 },
            ],
            [
              { x: 11, y: 43 },
              { x: 8, y: 42 },
              { x: 11, y: 45 },
            ],
            [
              { x: 14, y: 46 },
              { x: 11, y: 45 },
              { x: 14, y: 48 },
            ],
            [
              { x: 322, y: 409 },
              { x: 320, y: 409 },
              { x: 321, y: 448 },
              { x: 328, y: 444 },
              { x: 323, y: 412 },
            ],
            [
              { x: 244, y: 513 },
              { x: 244, y: 510 },
              { x: 242, y: 514 },
            ],
            [
              { x: 338, y: 439 },
              { x: 340, y: 436 },
              { x: 335, y: 439 },
            ],
            [
              { x: 17, y: 703 },
              { x: 19, y: 700 },
              { x: 14, y: 703 },
            ],
            [
              { x: 100, y: 646 },
              { x: 101, y: 643 },
              { x: 96, y: 647 },
            ],
            [
              { x: 168, y: 206 },
              { x: 164, y: 205 },
              { x: 168, y: 208 },
            ],
            [
              { x: 258, y: 353 },
              { x: 254, y: 352 },
              { x: 254, y: 492 },
            ],
            [
              { x: 75, y: 663 },
              { x: 77, y: 660 },
              { x: 71, y: 664 },
            ],
            [
              { x: 39, y: 688 },
              { x: 41, y: 685 },
              { x: 35, y: 689 },
            ],
            [
              { x: 23, y: 699 },
              { x: 25, y: 696 },
              { x: 19, y: 700 },
            ],
            [
              { x: 130, y: 625 },
              { x: 132, y: 622 },
              { x: 128, y: 625 },
            ],
            [
              { x: 127, y: 184 },
              { x: 124, y: 184 },
              { x: 209, y: 300 },
              { x: 130, y: 187 },
            ],
            [
              { x: 293, y: 384 },
              { x: 290, y: 383 },
              { x: 275, y: 477 },
              { x: 281, y: 475 },
              { x: 288, y: 469 },
              { x: 295, y: 388 },
            ],
            [
              { x: 332, y: 443 },
              { x: 335, y: 439 },
              { x: 334, y: 422 },
              { x: 330, y: 416 },
              { x: 323, y: 412 },
              { x: 328, y: 444 },
            ],
            [
              { x: 81, y: 659 },
              { x: 84, y: 655 },
              { x: 77, y: 660 },
            ],
            [
              { x: 11, y: 707 },
              { x: 14, y: 703 },
              { x: 92, y: 167 },
              { x: 7, y: 708 },
            ],
            [
              { x: 274, y: 479 },
              { x: 275, y: 477 },
              { x: 290, y: 383 },
              { x: 288, y: 381 },
              { x: 282, y: 376 },
              { x: 270, y: 480 },
            ],
            [
              { x: 246, y: 509 },
              { x: 247, y: 505 },
              { x: 218, y: 320 },
              { x: 213, y: 315 },
              { x: 244, y: 510 },
            ],
            [
              { x: 242, y: 517 },
              { x: 242, y: 514 },
              { x: 238, y: 521 },
            ],
            [
              { x: 160, y: 201 },
              { x: 157, y: 201 },
              { x: 164, y: 205 },
            ],
            [
              { x: 317, y: 405 },
              { x: 315, y: 405 },
              { x: 308, y: 456 },
              { x: 312, y: 455 },
              { x: 321, y: 448 },
              { x: 320, y: 409 },
            ],
            [
              { x: 37, y: 72 },
              { x: 35, y: 72 },
              { x: 43, y: 81 },
              { x: 40, y: 75 },
            ],
            [
              { x: 315, y: 403 },
              { x: 312, y: 400 },
              { x: 307, y: 398 },
              { x: 295, y: 464 },
              { x: 302, y: 462 },
              { x: 308, y: 456 },
              { x: 315, y: 405 },
            ],
            [
              { x: 211, y: 569 },
              { x: 214, y: 566 },
              { x: 219, y: 556 },
              { x: 209, y: 569 },
            ],
            [
              { x: 5, y: 711 },
              { x: 7, y: 708 },
              { x: 92, y: 167 },
              { x: 31, y: 68 },
              { x: 0, y: 33 },
              { x: 0, y: 713 },
            ],
            [
              { x: 205, y: 574 },
              { x: 219, y: 556 },
              { x: 223, y: 548 },
              { x: 197, y: 577 },
            ],
            [
              { x: 284, y: 376 },
              { x: 282, y: 376 },
              { x: 288, y: 381 },
            ],
            [
              { x: 107, y: 641 },
              { x: 113, y: 635 },
              { x: 213, y: 315 },
              { x: 100, y: 171 },
              { x: 92, y: 167 },
              { x: 101, y: 643 },
            ],
            [
              { x: 327, y: 446 },
              { x: 328, y: 444 },
              { x: 321, y: 448 },
            ],
            [
              { x: 135, y: 188 },
              { x: 130, y: 187 },
              { x: 209, y: 300 },
              { x: 209, y: 291 },
              { x: 202, y: 259 },
              { x: 141, y: 193 },
            ],
            [
              { x: 192, y: 218 },
              { x: 186, y: 217 },
              { x: 202, y: 259 },
              { x: 197, y: 228 },
              { x: 194, y: 220 },
            ],
            [
              { x: 236, y: 528 },
              { x: 238, y: 521 },
              { x: 234, y: 529 },
            ],
            [
              { x: 221, y: 555 },
              { x: 223, y: 548 },
              { x: 219, y: 556 },
            ],
            [
              { x: 99, y: 169 },
              { x: 92, y: 167 },
              { x: 100, y: 171 },
            ],
            [
              { x: 123, y: 182 },
              { x: 116, y: 180 },
              { x: 124, y: 184 },
            ],
            [
              { x: 148, y: 613 },
              { x: 154, y: 607 },
              { x: 213, y: 315 },
              { x: 144, y: 614 },
            ],
            [
              { x: 52, y: 679 },
              { x: 55, y: 675 },
              { x: 92, y: 167 },
              { x: 43, y: 683 },
            ],
            [
              { x: 20, y: 53 },
              { x: 14, y: 48 },
              { x: 20, y: 55 },
            ],
            [
              { x: 290, y: 469 },
              { x: 295, y: 464 },
              { x: 307, y: 398 },
              { x: 295, y: 388 },
              { x: 288, y: 469 },
            ],
            [
              { x: 28, y: 62 },
              { x: 20, y: 55 },
              { x: 31, y: 68 },
            ],
            [
              { x: 220, y: 320 },
              { x: 218, y: 320 },
              { x: 247, y: 505 },
              { x: 254, y: 492 },
              { x: 226, y: 327 },
            ],
            [
              { x: 65, y: 670 },
              { x: 71, y: 664 },
              { x: 92, y: 167 },
              { x: 55, y: 675 },
            ],
            [
              { x: 7, y: 39 },
              { x: 0, y: 33 },
              { x: 8, y: 42 },
            ],
            [
              { x: 88, y: 654 },
              { x: 96, y: 647 },
              { x: 84, y: 655 },
            ],
            [
              { x: 123, y: 630 },
              { x: 128, y: 625 },
              { x: 113, y: 635 },
            ],
            [
              { x: 142, y: 617 },
              { x: 144, y: 614 },
              { x: 213, y: 315 },
              { x: 132, y: 622 },
            ],
            [
              { x: 164, y: 602 },
              { x: 174, y: 593 },
              { x: 234, y: 529 },
              { x: 238, y: 521 },
              { x: 213, y: 315 },
              { x: 154, y: 607 },
            ],
            [
              { x: 189, y: 585 },
              { x: 197, y: 577 },
              { x: 223, y: 548 },
              { x: 234, y: 529 },
              { x: 174, y: 593 },
            ],
            [
              { x: 244, y: 341 },
              { x: 238, y: 338 },
              { x: 254, y: 492 },
              { x: 254, y: 352 },
            ],
            [
              { x: 260, y: 355 },
              { x: 258, y: 355 },
              { x: 254, y: 492 },
              { x: 267, y: 482 },
              { x: 268, y: 364 },
            ],
            [
              { x: 27, y: 696 },
              { x: 35, y: 689 },
              { x: 25, y: 696 },
            ],
            [
              { x: 249, y: 504 },
              { x: 254, y: 492 },
              { x: 247, y: 505 },
            ],
            [
              { x: 211, y: 303 },
              { x: 209, y: 300 },
              { x: 124, y: 184 },
              { x: 116, y: 180 },
              { x: 213, y: 315 },
            ],
            [
              { x: 78, y: 117 },
              { x: 71, y: 112 },
              { x: 92, y: 167 },
            ],
            [
              { x: 228, y: 327 },
              { x: 226, y: 327 },
              { x: 254, y: 492 },
              { x: 238, y: 338 },
            ],
            [
              { x: 297, y: 388 },
              { x: 295, y: 388 },
              { x: 307, y: 398 },
            ],
            [
              { x: 144, y: 193 },
              { x: 141, y: 193 },
              { x: 202, y: 259 },
              { x: 168, y: 208 },
            ],
            [
              { x: 185, y: 215 },
              { x: 171, y: 208 },
              { x: 168, y: 208 },
              { x: 202, y: 259 },
              { x: 186, y: 217 },
            ],
            [
              { x: 270, y: 364 },
              { x: 268, y: 364 },
              { x: 282, y: 376 },
            ],
            [
              { x: 115, y: 178 },
              { x: 100, y: 171 },
              { x: 116, y: 180 },
            ],
            [
              { x: 67, y: 105 },
              { x: 43, y: 81 },
              { x: 92, y: 167 },
              { x: 71, y: 112 },
            ],
            [
              { x: 225, y: 547 },
              { x: 234, y: 529 },
              { x: 223, y: 548 },
            ],
            [
              { x: 41, y: 685 },
              { x: 43, y: 683 },
              { x: 92, y: 167 },
              { x: 14, y: 703 },
            ],
            [
              { x: 205, y: 267 },
              { x: 202, y: 259 },
              { x: 209, y: 291 },
            ],
            [
              { x: 164, y: 205 },
              { x: 157, y: 201 },
              { x: 168, y: 208 },
            ],
            [
              { x: 96, y: 647 },
              { x: 101, y: 643 },
              { x: 92, y: 167 },
              { x: 84, y: 655 },
            ],
            [
              { x: 14, y: 48 },
              { x: 8, y: 42 },
              { x: 31, y: 68 },
            ],
            [
              { x: 19, y: 700 },
              { x: 35, y: 689 },
              { x: 14, y: 703 },
            ],
            [
              { x: 242, y: 514 },
              { x: 244, y: 510 },
              { x: 213, y: 315 },
              { x: 238, y: 521 },
            ],
            [
              { x: 113, y: 635 },
              { x: 128, y: 625 },
              { x: 132, y: 622 },
              { x: 213, y: 315 },
            ],
            [
              { x: 100, y: 171 },
              { x: 213, y: 315 },
              { x: 116, y: 180 },
            ],
            [
              { x: 84, y: 655 },
              { x: 92, y: 167 },
              { x: 71, y: 664 },
            ],
            [
              { x: 35, y: 72 },
              { x: 31, y: 68 },
              { x: 92, y: 167 },
              { x: 43, y: 81 },
            ],
          ],
        },
      ],
    },
  };

  console.log("Density: ", mountain["icy-mountain-removebg-preview"].density);

  // set up the engine and environment
  const engine = Engine.create();
  const runner = Runner.create();

  const matterCanvas: HTMLCanvasElement | null =
    document.querySelector(".matterCanvas");

  if (!matterCanvas) {
    throw new Error("matterCanvas not found");
  }

  // set up the renderer
  const render = Render.create({
    canvas: matterCanvas,
    engine,
    // set a background slightly lighter than the body's own background
    options: {
      wireframes: false,
      background: "hsl(225, 60%, 20%)",
      width: 400,
      height: 600,
    },
  });

  const mouse = Mouse.create(matterCanvas); //Creating the mouse in the world (i.e. Canvas)
  console.log("This is the mouse position: ", mouse.position);
  const { world } = engine;

  // global variables used throughout the canvas
  const width = 400; //800
  const height = 600;
  // number of columns and rows for the grid of pegs
  const columns = 8; //10
  const rows = 10; //20
  // margin to allocate buckets underneath the grid
  const bottomMargin = 150;
  const topMargin = 50;
  // padding to include make space for two rectangles at either side of the canvas
  const padding = width / columns / 2;

  //Setting limit on the number of Plinkos to play with.
  let currentPlinkosCount = 0;
  const maxPlinkosCount = 20;

  const plinkoCounter = document.getElementById("plinkoCounterDiv");

  const updatePlinkoCounter = () => {
    if (plinkoCounter) {
      plinkoCounter.textContent = `Count of plinkos: ${currentPlinkosCount}/${maxPlinkosCount}`;
    }
  };

  if (plinkoCounter) {
    updatePlinkoCounter();
  }

  const randomPlinkoOrnamentColor = () => {
    const ornamentOptions = ["red", "green"];
    const selectedColor =
      ornamentOptions[Math.floor(Math.random() * ornamentOptions.length)];
    console.log("Random ornament color: ", selectedColor);
    return selectedColor;
  };

  // function fabricating a plinko, as a circle included atop the canvas
  const makePlinko = (
    x: number,
    y: number,
    size: number,
    customImage: string
  ) => {
    // utility function returning a random integer between two values for color selection
    // const randomBetweenForColor = (min: number, max: number) =>
    //   Math.floor(Math.random() * (max - min)) + min;
    // Plinko Ball Color
    const red_fillStyle = "#c41414";
    const green_fillStyle = "#157701";

    const selectedColor = randomPlinkoOrnamentColor();
    const ballTexture =
      selectedColor === "red"
        ? "../../src/images/3d-ornament-red.png"
        : "../../src/images/3d-ornament-green.png";

    const r = size; //ball size

    if (customImage === "hand") {
      return Bodies.rectangle(x, y, size * 2, size * 2, {
        restitution: 0.8,
        render: {
          sprite: {
            texture: "../../src/images/hand.png",
            xScale: 1.0,
            yScale: 1.0,
          },
        },
        label: "hand",
      });
    }
    return Bodies.circle(x, y, r, {
      restitution: 0.8, //Restitution is the amount of bounce/elasticness that an object has when it collides with another object.
      render: {
        fillStyle: selectedColor === "red" ? red_fillStyle : green_fillStyle,
        sprite: {
          texture: ballTexture,
          xScale: 1,
          yScale: 1,
        },
      },
      // add a label to later identify the circle in the collision event
      label: "plinko",
    });
  };

  const makeCustomPlinko = {
    position: Vector.create(200, 50),
    density: mountain["icy-mountain-removebg-preview"].density,
    friction: mountain["icy-mountain-removebg-preview"].friction,
    frictionAir: mountain["icy-mountain-removebg-preview"].frictionAir,
    frictionStatic: mountain["icy-mountain-removebg-preview"].frictionStatic,
    collisionFilter: mountain["icy-mountain-removebg-preview"].collisionFilter,
    isStatic: true,
  };

  const ornament = Bodies.fromVertices(
    300,
    200,
    mountain["icy-mountain-removebg-preview"].fixtures[0].vertices,
    makeCustomPlinko
  );

  World.add(world, ornament);

  // const SVG_PATH_SELECTOR = "#matter-path";
  // const SVG_WIDTH_IN_PX = 100;
  // const SVG_WIDTH_AS_PERCENT_OF_CANVAS = 0.3;
  // function createSvgBodies() {
  //   const paths = document.querySelectorAll(SVG_PATH_SELECTOR);
  //   paths.forEach((path, index) => {
  //     let vertices = Svg.pathToVertices(path, 30);
  //     let scaleFactor = matterCanvas
  //       ? (matterCanvas.clientWidth * SVG_WIDTH_AS_PERCENT_OF_CANVAS) /
  //         SVG_WIDTH_IN_PX
  //       : 1;
  //     vertices = Vertices.scale(vertices, scaleFactor, scaleFactor);
  //     let svgBody = Bodies.fromVertices(index * SVG_WIDTH_IN_PX + 200, 0, [
  //       vertices,
  //     ]);
  //     Composite.add(engine.world, svgBody);
  //   });
  // }

  // From Docs: Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.
  const mouseConstraint = MouseConstraint.create(engine, {
    mouse,
  });

  // Fake ball at the top to follow the mouse
  let movingPlinkoBall: Matter.Body;
  // mouseConstraint Mousemove event
  Events.on(mouseConstraint, "mousemove", (event) => {
    if (movingPlinkoBall) {
      Body.setPosition(movingPlinkoBall, {
        x: mouse.position.x,
        y: 20,
      });
    } else {
      movingPlinkoBall = makePlinko(mouse.position.x, 20, 20, "hand");

      movingPlinkoBall.isStatic = true;
      Composite.add(world, movingPlinkoBall);
    }
  });

  // mouseConstraint mouseUp event
  Events.on(mouseConstraint, "mouseup", (event) => {
    console.log("Mouse is moving", mouse.position);

    if (currentPlinkosCount < maxPlinkosCount) {
      movingPlinkoBall.isStatic = true;
      movingPlinkoBall.render.fillStyle = "#808080";

      const plinkoBall = makePlinko(mouse.position.x, 40, 10, "ball");
      Composite.add(world, plinkoBall);

      currentPlinkosCount++;
      updatePlinkoCounter();
    } else {
      window.alert(
        "Maximum number of plinkos reached, please refresh to play again!"
      );
    }
  });

  // function fabricating a peg, as a white circle with a static position
  // accepting as input the coordinates of the circle's center
  const makePeg = (x: number, y: number) => {
    const r = 5;

    return Bodies.circle(x, y, r, {
      restitution: 1,
      isStatic: true,
      render: { fillStyle: "white" },
      label: "peg", // add a label to later identify the circle in the collision event
    });
  };

  // function fabricating a bucket, as a white taller-than-wider rectangle positioned at the bottom of the canvas
  const makeBucket = (x: number) => {
    const w = 5;
    const h = 80;
    const y = height - h / 2;

    return Bodies.rectangle(x, y, w, h, {
      isStatic: true,
      render: {
        fillStyle: "white",
      },
    });
  };

  let contourLeftTriangles = [];
  let contourRightTriangles = [];

  for (let i = 120; i < height - bottomMargin; i += 50) {
    // const leftTriangle = Bodies.polygon(-38, i, 3, 60, {
    //   isStatic: true,
    //   angle: Math.PI,
    //   render: {
    //     fillStyle: "white",
    //   },
    // });
    const leftTriangle = Bodies.polygon(-38, i, 3, 60, {
      isStatic: true,
      angle: Math.PI,
      render: {
        sprite: {
          texture: "../../src/images/icy.png",
          xScale: 0.36, //This is changing the pyramid's altitude (tip tip to floor)
          yScale: 0.9, //This is making the base wider (so they can touch)
        },
      },
    });
    // const rigttTriangle = Bodies.polygon(width + width / 10, i, 3, 60, {
    //   isStatic: true,
    //   angle: Math.PI,
    //   render: {
    //     fillStyle: "white",
    //   },
    const rigttTriangle = Bodies.polygon(width + width / 10, i, 3, 60, {
      isStatic: true,
      angle: 2 * Math.PI,
      render: {
        sprite: {
          texture: "../../src/images/icy.png",
          xScale: 0.19, //This is changing the pyramid's altitude (tip tip to floor)
          yScale: 0.5, //This is making the base wider (so they can touch)
        },
      },
    });

    contourLeftTriangles.push(leftTriangle);
    contourRightTriangles.push(rigttTriangle);
  }

  World.add(world, [...contourLeftTriangles, ...contourRightTriangles]);

  // const contourLeftTriangles = Bodies.polygon(10, 123, 3, 20, {
  //   isStatic: true,
  //   angle: Math.PI / 3,
  //   render: {
  //     fillStyle: "white",
  //   },
  // });

  // const contours = [contourLeftTriangles, contourRightTriangles];

  // plinko
  // an array of plinkos; the idea is to populate with the world immediately with a set number of plinkos
  // const plinkos = Array.from({ length: initialPlinkos }, () =>
  //   makePlinko()
  // );

  // pegs
  // array of columns and rows; the idea is to have pegs ranging the width and height of the canvas
  // use the padding to reduce the horizontal space allocated to the pegs
  const columnSize = (width - padding * 2) / columns;
  const rowSize = (height - bottomMargin) / rows;

  const grid = Array.from({ length: rows }, (_, row) => {
    const cols = row % 2 === 0 ? columns : columns - 1;
    const dx = cols !== columns ? columnSize / 2 : 0;
    return Array.from({ length: cols }, (_, column) => {
      const x = padding + columnSize * column + columnSize / 2 + dx;
      const y = rowSize * row + rowSize / 2 + topMargin;
      return makePeg(x, y);
    });
  });

  // since grid refers to a 2d array, flatten the items to a one-dimensional array
  const pegs = grid.reduce((acc, curr) => [...acc, ...curr], []);

  // buckets
  // arrays of buckets in which the plinkos would eventually fall
  // as many buckets as the number of columns, to make use of the left and right wall for the outer edges
  const buckets = Array.from({ length: columns }, (_, column) => {
    const x = columnSize * column + columnSize;
    return makeBucket(x);
  });

  // UNTIL HERE, WE CREATED THE OBJECTS THAT WILL BE IN THE GAME (peg, ball, walls, buckets), AND GENERATED THEIR CORRECT NUMBERS.

  // Now we create the world for the game by adding the objects into the world.
  World.add(world, [...contourLeftTriangles, ...pegs, ...buckets]); //ceating the world without plinkos. They come out when I click on the button

  // function adding a single plinko, used following a mouse press and at an interval
  // function addPlinko() {
  //   const plinko = makePlinko(width / 2, height / 2);
  //   console.log("Plinko has been added", plinko);
  //   World.add(world, plinko);
  //   // Engine.update(engine);
  // }

  // following a collision event retrieve the label of the two bodies
  // if one is a plinko, consider its color and apply it to the other body
  const handleCollision: ICollisionCallback = (event) => {
    const { pairs } = event;

    pairs.forEach((pair: { bodyA: any; bodyB: any }) => {
      const { bodyA, bodyB } = pair;
      const { label: labelA } = bodyA;
      const { label: labelB } = bodyB;

      // ! change the color only if one of the two body is a plinko
      if (labelA !== labelB) {
        if (labelA === "plinko") {
          const { fillStyle } = bodyA.render;
          bodyB.render.fillStyle = fillStyle;
          collisionSound.play();
        }
        if (labelB === "plinko") {
          const { fillStyle } = bodyB.render;
          bodyA.render.fillStyle = fillStyle;
          collisionSound.play();
        }
      }
    });
  };
  Events.on(engine, "collisionStart", handleCollision);

  // run the engine
  Runner.run(runner, engine); //We have eto create and run the runner so that the engine start playing the annimation.
  // run the renderer
  Render.run(render);
</script>

<Layout title="Let's play Christmas Plinko! by The Adpharm">
  <main class="flex flex-col min-h-screen">
    <div class="max-w-7xl mx-auto pt-32">
      <h1>Plinko!</h1>
      <div id="plinkoCounterDiv"></div>

      <div class="matterContainer h-full w-full bg-red-100">
        <canvas class="matterCanvas"></canvas>
        <canvas class="waveCanvas absolute top-0 left-0"></canvas>
      </div>
    </div>
  </main>
</Layout>
