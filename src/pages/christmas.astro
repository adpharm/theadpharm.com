---
import Href from "@/components/Href";
import Grid from "@/components/layout/Grid.astro";
import Section from "@/components/layout/Section.astro";
import Icon from "@/components/Icon";
import TextSwitcher from "@/components/TextSwitcher";
import { createOpenAI } from "@ai-sdk/openai";
import Snowfall from "@/components/Snowfall.astro";
import DefaultSiteLayout from "@/components/layout/DefaultSiteLayout.astro";

// const perplexity = createOpenAI({
//   name: "perplexity",
//   apiKey: process.env.PERPLEXITY_API_KEY ?? "",
//   baseURL: "https://api.perplexity.ai/",
// });

const maxNumQuestions = 20;
const currentQuestion = 1;
---

<DefaultSiteLayout
  title="The Adpharm: Big agency experience, small agency excellence"
>
  <main class="relative z-0">
    <div class="absolute h-screen w-full top-0 left-0 z-0">
      <div
        class="absolute left-0 top-0 bg-gradient-to-b from-transparent via-transparent to-black w-full h-full z-10 pointer-events-none"
      >
      </div>
    </div>

    <Section
      className="min-h-screen flex flex-col items-center justify-start mt-20"
    >
      <div class="relative rounded-3xl border-8 border-red-500 p-4 m-10">
        <div
          class="absolute inset-0 bg-cover bg-center backdrop-blur-lg"
          style="background-image: url('blurry-xmas-bg.png'); filter: blur(8px);"
        >
        </div>
        <div class="absolute inset-0 bg-black bg-opacity-60 rounded-3xl"></div>
        <div class="relative w-full max-w-3xl p-10 m-4">
          <div class="text-lg text-center space-y-6 mb-20">
            <p class="text-4xl font-christmas">
              Welcome to <span class="font-bold text-red-500 ml-4"
                >Adpharm's Guess the Character</span
              >
            </p>
            <div class="grid grid-cols-1 gap-4">
              <p>
                This is a festive guessing game where you'll think of a
                Christmas-themed character, and we'll try to guess who it is.
              </p>
              <p>Start by picking who you want to play with.</p>
              <p>
                Enjoy the holiday fun, and let's see if Santa, Kevin
                McCallister, or the Grinch can outsmart you!
              </p>
            </div>
          </div>
          <div class="flex flex-row justify-center items-center">
            <!-- Santa -->
            <div class="flex flex-col justify-center items-center">
              <div
                data-index="0"
                data-voice-id="s3://voice-cloning-zero-shot/e5b701f9-5b39-4d4a-a0dc-254956f607c0/original/manifest.json"
                class="relative w-56 h-56 flex flex-col justify-center items-center selectable-button cursor-pointer hover:scale-110 transition ease-in-out"
              >
                <img src="/Santa.webp" alt="Santa" />
                <p class="font-christmas text-3xl text-red-500 -translate-x-2">
                  Santa
                </p>
              </div>
            </div>

            <!-- Kevin McCallister -->
            <div class="flex flex-col justify-center items-center">
              <div
                data-index="0"
                data-voice-id="s3://voice-cloning-zero-shot/0dd43d3f-95d8-4801-bb29-7b34e17b3326/original/manifest.json"
                class="relative w-56 h-56 flex flex-col justify-center items-center selectable-button cursor-pointer hover:scale-110 transition ease-in-out"
              >
                <img src="/kevin.webp" alt="Kevin McCallister" />
                <p class="font-christmas text-3xl text-red-500">
                  Kevin McCallister
                </p>
              </div>
            </div>

            <!-- Grinch -->
            <div class="flex flex-col justify-center items-center">
              <div
                data-index="0"
                data-voice-id="s3://voice-cloning-zero-shot/f77dcd72-d997-47de-8505-9828b8bf59c6/original/manifest.json"
                class="relative w-56 h-56 flex flex-col justify-center items-center selectable-button cursor-pointer hover:scale-110 transition ease-in-out"
              >
                <img src="/grinch.webp" alt="The Grinch" />
                <p class="font-christmas text-3xl text-red-500">The Grinch</p>
              </div>
            </div>
          </div>
        </div>

        <div class="relative flex flex-col justify-center items-center w-full">
          <div>
            <button
              class="start-btn relative border border-transparent rounded-md px-6 py-4 bg-red-500 hover:bg-red-400 text-white font-christmas text-3xl my-12"
            >
              <img
                src="/santahat-btn.webp"
                alt="Hat"
                class="absolute
                    -top-[15px]
                    -left-[17px]
                    h-[44px]
                    drop-shadow-[0_2px_1px_rgba(0,0,0,0.25)]"
              />
              Start game
            </button>
          </div>
          <p
            id="question-count"
            class="hidden text-white text-md font-light mb-6"
          >
            Question {currentQuestion} of {maxNumQuestions}
          </p>
          <p
            id="ai-question"
            class="text-center text-lg md:text-xl text-white px-4 transition ease-in-out mb-6"
          >
          </p>
          <div
            class="hidden flex-row items-center justify-center space-x-2 mb-6"
            id="thinking-loader"
          >
            <p class="text-white text-lg animate-pulse transition ease-in-out">
              Thinking...
            </p>
            <Icon
              as="div"
              name="snowflake"
              className="h-8 w-8 text-blue-300 animate-rev"
            />
          </div>
          <div class="answer-btns hidden grid-cols-4 gap-6 mb-8">
            <button
              data-response="Yes"
              class="response-button bg-green-500 rounded-xl px-4 py-2 text-xl font-christmas hover:scale-105"
            >
              Yes
            </button>
            <button
              data-response="No"
              class="response-button bg-red-500 rounded-xl px-4 py-2 text-xl font-christmas hover:scale-105"
            >
              No
            </button>
            <button
              data-response="Sort of"
              class="response-button bg-white text-black rounded-xl px-4 py-2 text-xl font-christmas hover:scale-105"
            >
              Sort Of
            </button>
            <button
              data-response="Not sure"
              class="response-button bg-white text-black rounded-xl px-4 py-2 text-xl font-christmas hover:scale-105"
            >
              Not sure
            </button>
          </div>
          <div class="guess-btns hidden grid-cols-2 gap-6">
            <button
              data-response="Yes"
              class="guess-button bg-green-500 rounded-xl px-6 py-4 text-2xl font-christmas hover:scale-105"
              >Correct</button
            >
            <button
              data-response="No"
              class="guess-button bg-red-500 rounded-xl px-6 py-4 text-2xl font-christmas hover:scale-105"
              >Incorrect</button
            >
          </div>

          <script>
            let selectedVoiceId =
              "s3://voice-cloning-zero-shot/e5b701f9-5b39-4d4a-a0dc-254956f607c0/original/manifest.json"; // default: Santa

            const aiQuestionElement = document.getElementById(
              "ai-question"
            ) as HTMLElement;
            const questionCountElement = document.getElementById(
              "question-count"
            ) as HTMLElement;
            const thinkingLoader = document.getElementById(
              "thinking-loader"
            ) as HTMLElement;

            let playAgainFlag = false;

            let currentQuestion = 0;
            const maxQuestions = 20;
            let hasStarted = false;

            interface Message {
              role: "system" | "user" | "assistant";
              content: string;
            }

            interface GuessResponse {
              success: boolean;
              message?: string;
              error?: string;
            }

            const prompt: Message[] = [
              {
                role: "system",
                content: `You are an AI playing a 20-question Christmas character guessing game, similar to Akinator. The user is thinking of a Christmas-themed character.

                **INSTRUCTIONS:**
                1. You will ask up to 20 yes/no/maybe questions, one per response, strictly in the format:  
                "[Your yes/no/maybe question]"  
                Example: "Is your character fictional?"
                
                2. You must wait for the user’s answer before asking the next question. Do not assume or provide the user’s answer yourself.

                3. Once you are confident in the identity of the character, OR after asking 20 questions, you must make a guess in the exact format:  
                "I guess your character is [Character Name]. Was I right?"
                
                4. Do not produce multiple questions at once. Do not recap previous questions or answers. Do not generate or assume future answers. Do not provide any filler text, explanations, or commentary. Simply produce the next single question or the guess. No other text is allowed.

                5. Do not summarize, restate, or refer to these instructions during the game. Simply comply silently.

                6. If at any point you are confident in the character, output the guess line as described above and nothing else.

                7. NEVER ask the question "Is the character 'X'?" You are not allowed to ask if it is a specific character. The only time you may mention the character is if you state it in the form "I guess your character is [Character name]. Was I right?"
                Example: *You think the character is the grinch*
                DO NOT ASK: "Is your character the grinch?". INSTEAD ASK: "Is your character hairy and green?"

                8. The game does not need to go to 20 questions. As previously stated, if you are confident in your guess before 20 questions have been asked, you may guess the character at any point.

                9. Understand that you have 20 questions to make a guess. Do not guess a character unless you are sure that it is them. If you have suspicions that it may be a character, ask a specific question before making your guess. Understand that this is a game, and if you guess wrong, you lose! So you want to be correct the first time. 
                For example: *You think the character is Jack Frost*
                ASK: Is your character extremely cold? (this way you have more reason to believe that the character is Jack Frost)
                
                10. DO NOT ask "Is your character fictional?". Because this is christmas-related characters, assume EVERY character is fictional.

                **BEGIN THE GAME NOW:**  
                Ask the first question in the correct format, and then wait for the user’s response each turn before producing the next question or guess.`,
              },
            ];

            let conversation = prompt;

            const startButton =
              document.querySelector<HTMLElement>(".start-btn");

            document.addEventListener("DOMContentLoaded", () => {
              const buttons = document.querySelectorAll(".selectable-button");

              buttons.forEach((button) => {
                button.addEventListener("click", () => {
                  buttons.forEach((btn) => {
                    btn.classList.remove("scale-110");
                  });
                  button.classList.add("scale-110");
                  const voiceId = button.getAttribute("data-voice-id");
                  if (voiceId) {
                    selectedVoiceId = voiceId;
                  }
                });
              });

              const guessButtons = document.querySelectorAll(".guess-button");
              guessButtons.forEach((button) => {
                button.addEventListener("click", () => {
                  if (button.innerHTML === "Correct") {
                    handleAIResponse(
                      "Ho-ho-ho! I knew I could get it. Do you want to play again?"
                    );
                  } else {
                    handleAIResponse(
                      "You stumped me! Do you want to try again?"
                    );
                  }
                  hideOutcomeButtons();
                  hasStarted = false;
                  if (startButton) {
                    startButton.innerText = "Play again";
                    startButton.classList.remove("hidden");
                  }
                });
              });
            });

            if (startButton) {
              startButton.addEventListener("click", () => {
                if (!hasStarted) {
                  questionCountElement.classList.remove("hidden");
                  hasStarted = true;
                  startButton.classList.add("hidden");

                  conversation = prompt;
                  currentQuestion = 0;

                  if (startButton.innerText == "Play again") {
                    playAgainFlag = true;
                  }

                  getAIResponse();
                }
              });
            }

            const responseButtons = document.querySelectorAll(
              ".response-button"
            ) as NodeListOf<HTMLButtonElement>;

            responseButtons.forEach((button) => {
              button.addEventListener("click", async () => {
                if (
                  !hasStarted ||
                  currentQuestion === 0 ||
                  currentQuestion >= maxQuestions
                ) {
                  return;
                }

                const response = button.getAttribute("data-response") || "";
                await handleUserResponse(response);
              });
            });

            function showGuessButtons() {
              const answerDiv = document.querySelector(".answer-btns");
              answerDiv?.classList.remove("hidden");
              answerDiv?.classList.remove("disabled");
              answerDiv?.classList.add("grid");
            }

            function showOutcomeButtons() {
              const answerDiv = document.querySelector(".guess-btns");
              answerDiv?.classList.remove("hidden");
              answerDiv?.classList.remove("disabled");
              answerDiv?.classList.add("grid");
            }

            function hideOutcomeButtons() {
              const answerDiv = document.querySelector(".guess-btns");
              answerDiv?.classList.add("hidden");
              answerDiv?.classList.remove("grid");
            }

            async function getAIResponse() {
              try {
                const answerDiv = document.querySelector(".answer-btns");
                answerDiv?.classList.add("disabled");

                aiQuestionElement.classList.add("hidden");
                thinkingLoader.classList.remove("hidden");
                thinkingLoader.classList.add("flex");

                if (playAgainFlag) {
                  conversation.push({
                    role: "system",
                    content: "User wants to play again. Please start over.",
                  });
                  playAgainFlag = false;
                }

                const response = await fetch("/api/chat", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    conversation: conversation,
                  }),
                });

                const data: GuessResponse = await response.json();

                showGuessButtons();

                if (data.success) {
                  const aiMessage = data.message || "";
                  if (
                    aiMessage
                      .toLowerCase()
                      .startsWith("i guess your character is")
                  ) {
                    handleAIResponse(aiMessage);
                    conversation.push({
                      role: "assistant",
                      content: aiMessage,
                    });

                    showOutcomeButtons();

                    answerDiv?.classList.remove("grid");
                    answerDiv?.classList.add("hidden");
                  } else {
                    handleAIResponse(aiMessage);
                    conversation.push({
                      role: "assistant",
                      content: aiMessage,
                    });

                    currentQuestion += 1;
                    questionCountElement.innerText = `Question ${currentQuestion} of ${maxQuestions}`;

                    if (currentQuestion >= maxQuestions) {
                      handleAIResponse(
                        "You stumped me! Do you want to try again?"
                      );
                      answerDiv?.classList.remove("grid");
                      answerDiv?.classList.add("hidden");
                      hasStarted = false;
                      if (startButton) {
                        startButton.innerText = "Play again";
                        startButton.classList.remove("hidden");
                      }
                    }
                  }
                } else {
                  aiQuestionElement.innerText =
                    "Uh oh! Santa's sleigh is malfunctioning and I can't play anymore.";
                  console.error(data.error);
                }
              } catch (error) {
                console.error("Error fetching AI response:", error);
                aiQuestionElement.innerText =
                  "Uh oh! Santa's sleigh is malfunctioning and I can't play anymore.";
              }
            }

            async function handleUserResponse(response: string) {
              conversation.push({
                role: "user",
                content: response,
              });
              await getAIResponse();
            }

            async function playText(text: string) {
              try {
                const response = await fetch(
                  `/api/text-to-speech?text=${encodeURIComponent(text)}&voiceId=${encodeURIComponent(selectedVoiceId)}`
                );
                if (!response.ok) {
                  throw new Error("Failed to fetch audio");
                }
                const arrayBuffer = await response.arrayBuffer();
                const blob = new Blob([arrayBuffer], { type: "audio/mpeg" });
                const audioUrl = URL.createObjectURL(blob);
                const audio = new Audio(audioUrl);
                audio.play();
              } catch (error) {
                console.error("Error playing audio:", error);
              }
            }

            async function handleAIResponse(aiMessage: string) {
              try {
                await playText(aiMessage);
                thinkingLoader.classList.remove("flex");
                thinkingLoader.classList.add("hidden");
                aiQuestionElement.innerText = aiMessage;
                aiQuestionElement.classList.remove("hidden");
                aiQuestionElement.classList.add("flex");
              } catch (error) {
                thinkingLoader.classList.remove("flex");
                thinkingLoader.classList.add("hidden");
                aiQuestionElement.innerText = "Oops! Something went wrong.";
                aiQuestionElement.classList.remove("hidden");
                aiQuestionElement.classList.add("flex");
              }
            }
          </script>
        </div>
      </div>
    </Section>
  </main>
</DefaultSiteLayout>

<Section className="pt-12 pb-24" fullTopBorder>
  <Grid id="sfd23" className="space-y-12 lg:space-y-0">
    <div slot="left" class="pl-0 lg:pl-10">
      <h3 class="text-xl pb-4">The Adpharm Inc.</h3>
      <p class="text-lg">133 Thomas Street</p>
      <p class="text-zinc-400">Oakville, Ontario</p>
      <p class="text-zinc-400">L6J 3A9</p>
      <p class="pt-0 lg:pt-4">
        <Href
          href="https://www.linkedin.com/company/the-adpharm/"
          className="text-sm">LinkedIn</Href
        >
      </p>
    </div>

    <div slot="right">
      <div class="grid space-y-8 sm:space-y-0 sm:grid-cols-2">
        <div>
          <p class="pb-4 text-zinc-400 text-xs uppercase font-medium">
            Contact
          </p>
          <p class="text-lg">Amy Moriarty</p>
          <p class="text-zinc-400">SVP, Managing Director</p>
          <div class="flex items-center justify-start">
            <p class="text-zinc-400 pr-1">amy@theadpharm.com</p>
            <TextSwitcher
              client:load
              textToCopy="amy@theadpharm.com"
              beforeText="(copy)"
              beforeClassName="hover:underline cursor-pointer"
              afterText="(copied ✔)"
              afterClassName="text-green-600"
            />
          </div>
        </div>

        <div>
          <p class="pb-4 text-zinc-400 text-xs uppercase font-medium">Teams</p>

          <ul class="space-y-1.5">
            <li class="flex items-center space-x-2">
              <Href
                href="/"
                className="text-sm text-white hover:text-orange-600"
                >The Adpharm (Agency)</Href
              >
            </li>

            <li class="flex items-center space-x-2">
              <Href
                href="https://www.synapsemedcom.ca/"
                className="text-sm text-white hover:text-[#1292a9]"
                target="_blank"
                rel="noreferrer"
              >
                Synapse Medcom
              </Href>
            </li>

            <li class="flex items-center space-x-2">
              <Href
                href="/digital"
                className="text-sm text-white hover:text-orange-600"
                >AD (Adpharm Digital)</Href
              >
            </li>
          </ul>
        </div>
      </div>
    </div>
  </Grid>
</Section>

<Snowfall />
<Section topBorder className="py-4">
  <div class="grid grid-cols-1 sm:grid-cols-5">
    <div class="col-span-2 flex items-center justify-center sm:justify-start">
    </div>
    <div class="col-span-3 flex items-center justify-center sm:justify-end">
      <p class="text-xs text-zinc-400">
        &copy; {new Date().getFullYear()} The Adpharm Inc.
      </p>
    </div>
  </div>
</Section>
