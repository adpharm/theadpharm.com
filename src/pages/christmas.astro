---
import Href from "@/components/Href";
import Grid from "@/components/layout/Grid.astro";
import Section from "@/components/layout/Section.astro";
import Icon from "@/components/Icon";
import TextSwitcher from "@/components/TextSwitcher";
import Snowfall from "@/components/Snowfall.astro";
import DefaultSiteLayout from "@/components/layout/DefaultSiteLayout.astro";
import { BadgeInfo, XIcon } from "lucide-react";

// const perplexity = createOpenAI({
//   name: "perplexity",
//   apiKey: process.env.PERPLEXITY_API_KEY ?? "",
//   baseURL: "https://api.perplexity.ai/",
// });

const maxNumQuestions = 20;
const currentQuestion = 1;
---

<style is:global>
  .red-overlay {
    @apply absolute inset-0 bg-red-500 rounded-[15px] z-50;
    clip-path: circle(0% at 50% 50%);
    transition: clip-path 0.6s ease-in-out;
  }

  .red-overlay.revealed {
    clip-path: circle(150% at 50% 50%);
  }

  .red-overlay.shrinking {
    clip-path: circle(0% at 50% 50%);
  }
</style>

<DefaultSiteLayout
  title="The Adpharm: Big agency experience, small agency excellence"
>
  <main class="relative z-0">
    <div class="absolute h-screen w-full top-0 left-0 z-0">
      <div
        class="absolute left-0 top-0 bg-gradient-to-b from-transparent via-transparent to-black w-full h-full z-10 pointer-events-none"
      >
      </div>
    </div>

    <Section
      className="min-h-screen flex flex-col items-center justify-start mt-20"
    >
      <div
        class="relative rounded-3xl border-8 border-red-500 p-4 m-10 min-h-[80vh] w-full max-w-4xl flex flex-col justify-evenly items-center"
      >
        <div class="red-overlay" id="transition-overlay">
          <div
            id="overlay-description"
            class="relative text-lg text-center space-y-6 mb-20 flex hidden p-10 flex-col justify-center items-center pt-10"
          >
            <XIcon
              id="close-instructions"
              className="text-white absolute top-0 right-0 m-6 size-8 hover:cursor-pointer hover:scale-110"
            />
            <p class="text-4xl font-christmas">
              Welcome to <span class="font-bold text-black ml-4"
                >Adpharm's Guess the Character</span
              >
            </p>
            <div
              class="grid grid-cols-1 gap-4 bg-black bg-opacity-40 p-4 py-8 rounded-lg"
            >
              <p>
                This is a festive guessing game where you'll think of a
                Christmas-themed character, and we'll try to guess who it is.
              </p>
              <p>Start by picking who you want to play with.</p>
              <p>
                Enjoy the holiday fun, and let's see if Santa, Kevin
                McCallister, or the Grinch can outsmart you!
              </p>

              <p class="font-christmas text-4xl text-white">Rules</p>
              <ol class="list-decimal px-10 text-left">
                <li>
                  Pick a creative christmas-related character you think might be
                  able to stump your opponent.
                </li>
                <li>
                  Answer the questions honestly! If you're not sure about your
                  answer, select 'Sort of' or 'Not sure'.
                </li>
                <li>
                  Your opponent has 21 questions to try and guess your
                  character. If they don't guess it, you win!
                </li>
                <li>
                  Last but not least, have fun and have a Merry Christmas!
                </li>
              </ol>

              <div>
                <button
                  id="close-instructions-2"
                  class="relative border border-transparent rounded-md px-6 py-4 bg-red-500 hover:bg-red-400 text-white font-christmas text-3xl my-4"
                >
                  <img
                    src="/santahat-btn.webp"
                    alt="Hat"
                    class="absolute
                    -top-[15px]
                    -right-[17px]
                    h-[44px]
                    drop-shadow-[0_2px_1px_rgba(0,0,0,0.25)]
                    scale-x-[-1]"
                  />
                  Okay!
                </button>
              </div>
            </div>
          </div>
        </div>

        <div
          class="absolute inset-0 bg-cover bg-center backdrop-blur-lg border-8 border-red-500"
          style="background-image: url('blurry-xmas-bg.png'); filter: blur(8px);"
        >
        </div>
        <div class="absolute inset-0 bg-black bg-opacity-60 rounded-[16px]">
        </div>
        <div id="info-div" class="absolute inset-0 hidden">
          <BadgeInfo
            id="info-btn"
            className="text-white absolute top-0 right-0 m-6 size-8 hover:cursor-pointer hover:scale-110 hidden lg:block"
          />
        </div>
        <div
          class="relative w-full max-w-3xl p-10 m-4 flex flex-col justify-center items-center"
        >
          <div
            id="game-description"
            class="text-lg text-center space-y-6 mb-20"
          >
            <p class="text-4xl font-christmas">
              Welcome to <span class="font-bold text-red-500 ml-4"
                >Adpharm's Guess the Character</span
              >
            </p>
            <div class="grid grid-cols-1 gap-4">
              <p>
                This is a festive guessing game where you'll think of a
                Christmas-themed character, and we'll try to guess who it is.
              </p>
              <p>Start by picking who you want to play with.</p>
              <p>
                Enjoy the holiday fun, and let's see if Santa, Kevin
                McCallister, or the Grinch can outsmart you!
              </p>
            </div>
          </div>
          <div
            id="speech-bubble"
            class="relative bg-white text-black rounded-full px-6 py-4 max-w-md mb-12 h-32 flex items-center justify-center
    after:content-[''] after:absolute after:bottom-[-10px] after:left-1/2 after:transform after:-translate-x-1/2 after:translate-y-2
    after:border-[10px] after:border-transparent after:border-t-white hidden"
          >
            <p
              id="ai-question"
              class="text-center text-xl md:text-xl px-4 font-semibold transition ease-in-out font-speech break-words"
            >
              <!-- AI Question Text -->
            </p>
            <!-- Thinking Loader -->
            <div
              class="hidden flex-row items-center justify-center space-x-2"
              id="thinking-loader"
            >
              <p
                class="text-black text-xl animate-pulse transition ease-in-out font-speech"
              >
                Thinking...
              </p>
              <Icon
                as="div"
                name="snowflake"
                className="h-8 w-8 text-blue-300 animate-pulse"
              />
            </div>
          </div>
          <div class="flex flex-col lg:flex-row justify-center items-center">
            <!-- Santa -->
            <div class="flex flex-col justify-center items-center">
              <div
                id="santa"
                data-index="0"
                data-voice-id="s3://voice-cloning-zero-shot/e5b701f9-5b39-4d4a-a0dc-254956f607c0/original/manifest.json"
                class="relative w-56 h-56 flex flex-col justify-center items-center selectable-button cursor-pointer hover:scale-110 transition ease-in-out"
              >
                <img src="/Santa.webp" alt="Santa" />
                <p class="font-christmas text-3xl text-red-500 -translate-x-2">
                  Santa
                </p>
              </div>
            </div>

            <!-- Kevin McCallister -->
            <div class="flex flex-col justify-center items-center">
              <div
                id="kevin"
                data-index="0"
                data-voice-id="s3://voice-cloning-zero-shot/0dd43d3f-95d8-4801-bb29-7b34e17b3326/original/manifest.json"
                class="relative w-56 h-56 flex flex-col justify-center items-center selectable-button cursor-pointer hover:scale-110 transition ease-in-out"
              >
                <img src="/kevin.webp" alt="Kevin McCallister" />
                <p class="font-christmas text-3xl text-red-500">
                  Kevin McCallister
                </p>
              </div>
            </div>

            <!-- Grinch -->
            <div class="flex flex-col justify-center items-center">
              <div
                id="grinch"
                data-index="0"
                data-voice-id="s3://voice-cloning-zero-shot/f77dcd72-d997-47de-8505-9828b8bf59c6/original/manifest.json"
                class="relative w-56 h-56 flex flex-col justify-center items-center selectable-button cursor-pointer hover:scale-110 transition ease-in-out"
              >
                <img src="/grinch.webp" alt="The Grinch" />
                <p class="font-christmas text-3xl text-red-500">The Grinch</p>
              </div>
            </div>
          </div>
        </div>

        <div class="relative flex flex-col justify-center items-center w-full">
          <div>
            <button
              class="start-btn relative border border-transparent rounded-md px-6 py-4 bg-red-500 hover:bg-red-400 text-white font-christmas text-3xl my-12"
            >
              <img
                src="/santahat-btn.webp"
                alt="Hat"
                class="absolute
                    -top-[15px]
                    -left-[17px]
                    h-[44px]
                    drop-shadow-[0_2px_1px_rgba(0,0,0,0.25)]"
              />
              Start game
            </button>
          </div>
          <p
            id="question-count"
            class="hidden text-white text-md font-light mb-6"
          >
            Question {currentQuestion} of {maxNumQuestions}
          </p>
          <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-8">
            <button
              data-response="Yes"
              class="answer-btns response-button bg-green-700 rounded-xl px-8 py-4 text-2xl font-christmas hover:scale-105 opacity-0"
            >
              Yes
            </button>
            <button
              data-response="No"
              class="answer-btns response-button bg-red-600 rounded-xl px-8 py-4 text-2xl font-christmas hover:scale-105 opacity-0"
            >
              No
            </button>
            <button
              data-response="Sort of"
              class="answer-btns response-button bg-white text-black rounded-xl px-8 py-4 text-2xl font-christmas hover:scale-105 opacity-0"
            >
              Sort Of
            </button>
            <button
              data-response="Not sure"
              class="answer-btns response-button bg-white text-black rounded-xl px-8 py-4 text-2xl font-christmas hover:scale-105 opacity-0"
            >
              Not sure
            </button>
          </div>
          <div class="guess-btns hidden grid-cols-1 lg:grid-cols-2 gap-6">
            <button
              data-response="Yes"
              class="guess-button bg-green-500 rounded-xl px-6 py-4 text-2xl font-christmas hover:scale-105"
              >Correct</button
            >
            <button
              data-response="No"
              class="guess-button bg-red-500 rounded-xl px-6 py-4 text-2xl font-christmas hover:scale-105"
              >Incorrect</button
            >
          </div>

          <script>
            let selectedVoiceId =
              "s3://voice-cloning-zero-shot/e5b701f9-5b39-4d4a-a0dc-254956f607c0/original/manifest.json";

            const aiQuestionElement = document.getElementById(
              "ai-question"
            ) as HTMLElement;
            const questionCountElement = document.getElementById(
              "question-count"
            ) as HTMLElement;
            const thinkingLoader = document.getElementById(
              "thinking-loader"
            ) as HTMLElement;

            let playAgainFlag = false;
            const overlay = document.getElementById("transition-overlay");

            let expanded = false;

            let selectedCharacter = "";

            const infoDiv = document.getElementById("info-div");
            const infoBtn = document.getElementById("info-btn");

            const answerBtns = document.querySelectorAll(".answer-btns");

            if (overlay) {
              overlay.addEventListener("transitionend", () => {
                // Check the current state of the animation
                if (!expanded) {
                  // After the first transition finishes (expansion to 150%)
                  // Now trigger the shrinking animation
                  expanded = true; // Mark that we reached the expanded state
                  if (
                    document
                      .getElementById("overlay-description")
                      ?.classList.contains("hidden")
                  ) {
                    overlay.classList.add("shrinking");
                  }
                } else {
                  // After the second transition finishes (shrink back to 0%)
                  // Remove the overlay
                  if (
                    document
                      .getElementById("overlay-description")
                      ?.classList.contains("hidden")
                  ) {
                    console.log("hidden flag triggering");
                    overlay.classList.add("hidden");
                  }
                }
              });
            }

            if (infoBtn) {
              infoBtn.addEventListener("click", () => {
                if (overlay) {
                  console.log("triggering overlay");
                  const desc = document.getElementById("overlay-description");
                  desc?.classList.remove("hidden");

                  // Reset overlay to initial state:
                  overlay.classList.remove("hidden", "shrinking", "revealed");
                  // Reset the expanded state so the transition logic works again.
                  expanded = false;

                  // Force a reflow (optional) to ensure browser sees the reset:
                  overlay.getBoundingClientRect();

                  // Now trigger the animation again:
                  overlay.classList.add("revealed");
                }
              });
            }

            let currentQuestion = 0;
            const maxQuestions = 21;
            let hasStarted = false;

            interface Message {
              role: "system" | "user" | "assistant";
              content: string;
            }

            interface GuessResponse {
              success: boolean;
              message?: string;
              error?: string;
            }

            const prompt: Message[] = [
              {
                role: "system",
                content: `You are an AI playing a 21-question Christmas character guessing game, similar to Akinator. The user is thinking of a Christmas-themed character.

                **INSTRUCTIONS:**
                1. You will ask up to 21 yes/no/maybe questions, one per response, strictly in the format:  
                "[Your yes/no/maybe question]"  
                Example: "Is your character fictional?"
                
                2. You must wait for the user's answer before asking the next question. Do not assume or provide the user's answer yourself.

                3. Once you are confident in the identity of the character, OR after asking 20 questions, you must make a guess in the exact format:  
                "I guess your character is [Character Name]. Was I right?"
                
                4. Do not produce multiple questions at once. Do not recap previous questions or answers. Do not generate or assume future answers. Do not provide any filler text, explanations, or commentary. Simply produce the next single question or the guess. No other text is allowed.

                5. Do not summarize, restate, or refer to these instructions during the game. Simply comply silently.

                6. If at any point you are confident in the character, output the guess line as described above and nothing else.

                7. NEVER ask the question "Is the character 'X'?" You are not allowed to ask if it is a specific character. The only time you may mention the character is if you state it in the form "I guess your character is [Character name]. Was I right?"
                Example: *You think the character is the grinch*
                DO NOT ASK: "Is your character the grinch?". INSTEAD ASK: "Is your character hairy and green?"

                8. The game does not need to go to 20 questions. As previously stated, if you are confident in your guess before 20 questions have been asked, you may guess the character at any point.

                9. Understand that you have 20 questions to make a guess. Do not guess a character unless you are sure that it is them. If you have suspicions that it may be a character, ask a specific question before making your guess. Understand that this is a game, and if you guess wrong, you lose! So you want to be correct the first time. 
                For example: *You think the character is Jack Frost*
                ASK: Is your character extremely cold? (this way you have more reason to believe that the character is Jack Frost)
                
                10. DO NOT ask "Is your character fictional?". Because this is christmas-related characters, assume EVERY character is fictional.

                **BEGIN THE GAME NOW:**  
                Ask the first question in the correct format, and then wait for the user's response each turn before producing the next question or guess.`,
              },
            ];

            let conversation = prompt;

            const startButton =
              document.querySelector<HTMLElement>(".start-btn");

            document.addEventListener("DOMContentLoaded", () => {
              const buttons = document.querySelectorAll(".selectable-button");

              buttons.forEach((button) => {
                button.addEventListener("click", () => {
                  buttons.forEach((btn) => {
                    btn.classList.remove("scale-110");
                  });
                  selectedCharacter = button.id;
                  button.classList.add("scale-110");
                  const voiceId = button.getAttribute("data-voice-id");
                  if (voiceId) {
                    selectedVoiceId = voiceId;
                  }
                });
              });

              const guessButtons = document.querySelectorAll(".guess-button");
              guessButtons.forEach((button) => {
                button.addEventListener("click", () => {
                  if (button.innerHTML === "Correct") {
                    handleAIResponse(
                      "Ho-ho-ho! I knew I could get it. Do you want to play again?"
                    );
                  } else {
                    handleAIResponse(
                      "You stumped me! Do you want to try again?"
                    );
                  }
                  hideOutcomeButtons();
                  hasStarted = false;
                  if (startButton) {
                    startButton.innerText = "Play again";
                    startButton.classList.remove("hidden");
                  }
                });
              });
            });

            const closeInstructions =
              document.getElementById("close-instructions");

            const closeInstructions2 = document.getElementById(
              "close-instructions-2"
            );

            if (closeInstructions) {
              closeInstructions.addEventListener("click", () => {
                overlay?.classList.add("shrinking");
              });
            }

            if (closeInstructions2) {
              closeInstructions2.addEventListener("click", () => {
                overlay?.classList.add("shrinking");
              });
            }

            if (startButton) {
              startButton.addEventListener("click", () => {
                playAgainFlag = false;

                answerBtns.forEach((button) => {
                  button.classList.remove("opacity-0");

                  button.classList.add("opacity-100");
                });

                if (!hasStarted && selectedCharacter !== "") {
                  const buttons =
                    document.querySelectorAll(".selectable-button");

                  questionCountElement.classList.remove("hidden");
                  hasStarted = true;
                  startButton.classList.add("hidden");

                  conversation = prompt;
                  currentQuestion = 0;

                  if (overlay) {
                    overlay.classList.add("revealed");
                  }

                  // Delay the content changes by 600ms to match the transition duration
                  setTimeout(() => {
                    // Hide instruction text
                    document
                      .getElementById("game-description")
                      ?.classList.add("hidden");

                    // Hide other characters
                    buttons.forEach((button) => {
                      console.log(button.id, " AND ", selectedCharacter);
                      if (button.id !== selectedCharacter) {
                        button.classList.add("hidden");
                      } else {
                        button.classList.remove(
                          "hover:scale-110",
                          "cursor-pointer"
                        );
                        button.classList.add("scale-150");
                      }
                    });

                    // Show info div
                    document
                      .getElementById("info-div")
                      ?.classList.remove("hidden");

                    // Show speech bubble
                    document
                      .getElementById("speech-bubble")
                      ?.classList.remove("hidden");

                    if (startButton.innerText == "Play again") {
                      playAgainFlag = true;

                      if (overlay) {
                        overlay.addEventListener("transitionend", () => {
                          // Check the current state of the animation
                          if (!expanded) {
                            // After the first transition finishes (expansion to 150%)
                            // Now trigger the shrinking animation
                            expanded = true; // Mark that we reached the expanded state
                            if (
                              document
                                .getElementById("overlay-description")
                                ?.classList.contains("hidden")
                            ) {
                              overlay.classList.add("shrinking");
                            }
                          } else {
                            // After the second transition finishes (shrink back to 0%)
                            // Remove the overlay
                            if (
                              document
                                .getElementById("overlay-description")
                                ?.classList.contains("hidden")
                            ) {
                              console.log("hidden flag triggering");
                              overlay.classList.add("hidden");
                            }
                          }
                        });
                      }
                    }

                    getAIResponse();
                  }, 600); // 600ms delay
                }
              });
            }

            const responseButtons = document.querySelectorAll(
              ".response-button"
            ) as NodeListOf<HTMLButtonElement>;

            responseButtons.forEach((button) => {
              button.addEventListener("click", async () => {
                hideGuessButtons();
                if (
                  !hasStarted ||
                  currentQuestion === 0 ||
                  currentQuestion >= maxQuestions
                ) {
                  return;
                }

                const response = button.getAttribute("data-response") || "";
                await handleUserResponse(response);
              });
            });

            function showGuessButtons() {
              answerBtns.forEach((button) => {
                button.classList.remove("opacity-0");
                button.classList.add("opacity-100");
              });
            }
            function hideGuessButtons() {
              answerBtns.forEach((button) => {
                button.classList.remove("opacity-100");
                button.classList.add("opacity-0");
              });

              questionCountElement.classList.add("hidden");
            }

            function showOutcomeButtons() {
              const answerDiv = document.querySelector(".guess-btns");
              answerDiv?.classList.remove("hidden");
              answerDiv?.classList.remove("disabled");
              answerDiv?.classList.add("grid");
            }

            function hideOutcomeButtons() {
              const answerDiv = document.querySelector(".guess-btns");
              answerDiv?.classList.add("hidden");
              answerDiv?.classList.remove("grid");
            }

            async function getAIResponse() {
              try {
                hideGuessButtons();

                aiQuestionElement.classList.add("hidden");
                thinkingLoader.classList.remove("hidden");
                thinkingLoader.classList.add("flex");

                if (playAgainFlag) {
                  conversation.push({
                    role: "system",
                    content: "User wants to play again. Please start over.",
                  });

                  // reset other things
                  selectedCharacter = "";

                  const buttons =
                    document.querySelectorAll(".selectable-button");

                  buttons.forEach((button) => {
                    button.classList.remove("hidden", "scale-150");
                    button.classList.add("hover:scale-110", "cursor-pointer");
                  });

                  // hide speech bubble
                  document
                    .getElementById("speech-bubble")
                    ?.classList.add("hidden");

                  // hide question indictor
                  questionCountElement.classList.add("hidden");

                  // reset question count
                  currentQuestion = 0;

                  // hide response buttons
                  hideGuessButtons();

                  // show instruction text again
                  document
                    .getElementById("game-description")
                    ?.classList.remove("hidden");

                  // show start button again
                  if (startButton) {
                    startButton.classList.remove("hidden");
                    startButton.innerText = "Start game";
                  }
                  hasStarted = false;
                }

                if (playAgainFlag == false) {
                  const response = await fetch("/api/chat", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                      conversation: conversation,
                    }),
                  });

                  const data: GuessResponse = await response.json();

                  showGuessButtons();

                  if (data.success) {
                    const aiMessage = data.message || "";
                    if (
                      aiMessage
                        .toLowerCase()
                        .startsWith("i guess your character is")
                    ) {
                      handleAIResponse(aiMessage);
                      conversation.push({
                        role: "assistant",
                        content: aiMessage,
                      });

                      showOutcomeButtons();

                      hideGuessButtons();
                    } else {
                      handleAIResponse(aiMessage);
                      conversation.push({
                        role: "assistant",
                        content: aiMessage,
                      });

                      currentQuestion += 1;
                      questionCountElement.innerText = `Question ${currentQuestion} of ${maxQuestions}`;

                      if (currentQuestion >= maxQuestions) {
                        handleAIResponse(
                          "You stumped me! Do you want to try again?"
                        );
                        hideGuessButtons();
                        hasStarted = false;
                        if (startButton) {
                          startButton.innerText = "Play again";
                          startButton.classList.remove("hidden");
                        }
                      }
                    }
                  } else {
                    aiQuestionElement.innerText =
                      "Uh oh! Santa's sleigh is malfunctioning and I can't play anymore.";
                    console.error(data.error);
                  }
                } else {
                  playAgainFlag = true;
                }
              } catch (error) {
                console.error("Error fetching AI response:", error);
                aiQuestionElement.innerText =
                  "Uh oh! Santa's sleigh is malfunctioning and I can't play anymore.";
              }
            }

            async function handleUserResponse(response: string) {
              conversation.push({
                role: "user",
                content: response,
              });
              await getAIResponse();
            }

            async function playText(text: string) {
              try {
                const response = await fetch(
                  `/api/text-to-speech?text=${encodeURIComponent(text)}&voiceId=${encodeURIComponent(selectedVoiceId)}`
                );
                if (!response.ok) {
                  throw new Error("Failed to fetch audio");
                }
                const arrayBuffer = await response.arrayBuffer();
                const blob = new Blob([arrayBuffer], { type: "audio/mpeg" });
                const audioUrl = URL.createObjectURL(blob);
                const audio = new Audio(audioUrl);
                audio.play();
              } catch (error) {
                console.error("Error playing audio:", error);
              }
            }

            async function handleAIResponse(aiMessage: string) {
              try {
                await playText(aiMessage);
                thinkingLoader.classList.remove("flex");
                thinkingLoader.classList.add("hidden");
                aiQuestionElement.innerText = aiMessage;
                aiQuestionElement.classList.remove("hidden");
                aiQuestionElement.classList.add("flex");
                showGuessButtons;
              } catch (error) {
                thinkingLoader.classList.remove("flex");
                thinkingLoader.classList.add("hidden");
                aiQuestionElement.innerText = "Oops! Something went wrong.";
                aiQuestionElement.classList.remove("hidden");
                aiQuestionElement.classList.add("flex");
              }
            }
          </script>
        </div>
      </div>
    </Section>
  </main>
</DefaultSiteLayout>

<Section className="pt-12 pb-24" fullTopBorder>
  <Grid id="sfd23" className="space-y-12 lg:space-y-0">
    <div slot="left" class="pl-0 lg:pl-10">
      <h3 class="text-xl pb-4">The Adpharm Inc.</h3>
      <p class="text-lg">133 Thomas Street</p>
      <p class="text-zinc-400">Oakville, Ontario</p>
      <p class="text-zinc-400">L6J 3A9</p>
      <p class="pt-0 lg:pt-4">
        <Href
          href="https://www.linkedin.com/company/the-adpharm/"
          className="text-sm">LinkedIn</Href
        >
      </p>
    </div>

    <div slot="right">
      <div class="grid space-y-8 sm:space-y-0 sm:grid-cols-2">
        <div>
          <p class="pb-4 text-zinc-400 text-xs uppercase font-medium">
            Contact
          </p>
          <p class="text-lg">Amy Moriarty</p>
          <p class="text-zinc-400">SVP, Managing Director</p>
          <div class="flex items-center justify-start">
            <p class="text-zinc-400 pr-1">amy@theadpharm.com</p>
            <TextSwitcher
              client:load
              textToCopy="amy@theadpharm.com"
              beforeText="(copy)"
              beforeClassName="hover:underline cursor-pointer"
              afterText="(copied ✔)"
              afterClassName="text-green-600"
            />
          </div>
        </div>

        <div>
          <p class="pb-4 text-zinc-400 text-xs uppercase font-medium">Teams</p>

          <ul class="space-y-1.5">
            <li class="flex items-center space-x-2">
              <Href
                href="/"
                className="text-sm text-white hover:text-orange-600"
                >The Adpharm (Agency)</Href
              >
            </li>

            <li class="flex items-center space-x-2">
              <Href
                href="https://www.synapsemedcom.ca/"
                className="text-sm text-white hover:text-[#1292a9]"
                target="_blank"
                rel="noreferrer"
              >
                Synapse Medcom
              </Href>
            </li>

            <li class="flex items-center space-x-2">
              <Href
                href="/digital"
                className="text-sm text-white hover:text-orange-600"
                >AD (Adpharm Digital)</Href
              >
            </li>
          </ul>
        </div>
      </div>
    </div>
  </Grid>
</Section>

<Snowfall />
<Section topBorder className="py-4">
  <div class="grid grid-cols-1 sm:grid-cols-5">
    <div class="col-span-2 flex items-center justify-center sm:justify-start">
    </div>
    <div class="col-span-3 flex items-center justify-center sm:justify-end">
      <p class="text-xs text-zinc-400">
        &copy; {new Date().getFullYear()} The Adpharm Inc.
      </p>
    </div>
  </div>
</Section>
